###############################################################################
# Updater script for S000963_171111_ROW firmware
# Lenovo YT-X703L (Wi-Fi + LTE)
###############################################################################
getprop("ro.product.device") == "yt_x703l" || abort("E3004: This package is for \"YT-X703L\" devices; this is a \"" + getprop("ro.product.device") + "\".");

ui_print("Flashing stock firmware S000744_170824_ROW onto your YT-X703L.");
set_progress(0.01);
ui_print(" ");
#
# Perform the SHA1 checks
sha1_check(package_extract_file("adspso.bin"),        e3e703c8be5cb9c445eb22e0c3463b2bc0088ce3) || abort("E3005: File adspso.bin does not have SHA1 e3e703c8be5cb9c445eb22e0c3463b2bc0088ce3");
sha1_check(package_extract_file("cmnlib64.mbn"),      55bc15c34543099b9e76e96291207fe996b70f7e) || abort("E3005: File cmnlib64.mbn does not have SHA1 55bc15c34543099b9e76e96291207fe996b70f7e");
sha1_check(package_extract_file("cmnlib.mbn"),        add83b71d287ad24bd812c01753fd0fc7c4fa090) || abort("E3005: File cmnlib.mbn does not have SHA1 add83b71d287ad24bd812c01753fd0fc7c4fa090");
sha1_check(package_extract_file("devcfg.mbn"),        947b2265ce3969b685334bac1df5cd04b7cd9a07) || abort("E3005: File devcfg.mbn does not have SHA1 947b2265ce3969b685334bac1df5cd04b7cd9a07");
sha1_check(package_extract_file("emmc_appsboot.mbn"), 1f7c6e4f346a8c3907ee57d66ef1beec6bff7fad) || abort("E3005: File emmc_appsboot.mbn does not have SHA1 1f7c6e4f346a8c3907ee57d66ef1beec6bff7fad");
sha1_check(package_extract_file("keymaster.mbn"),     092fd4bc6f57970a625bbc5183d0287ccc41b9ae) || abort("E3005: File keymaster.mbn does not have SHA1 092fd4bc6f57970a625bbc5183d0287ccc41b9ae");
sha1_check(package_extract_file("mdtp.img"),          6be82f101913a8b888c0fc940dc4bc9f7005621b) || abort("E3005: File mdtp.img does not have SHA1 6be82f101913a8b888c0fc940dc4bc9f7005621b");
sha1_check(package_extract_file("NON-HLOS.bin"),      e4e2d77f81c7b8eee436a67f3ebb4b603c0ccf00) || abort("E3005: File NON-HLOS.bin does not have SHA1 e4e2d77f81c7b8eee436a67f3ebb4b603c0ccf00");
sha1_check(package_extract_file("rpm.mbn"),           ce110be9a902399fd37157c948afb2d8e8815ec6) || abort("E3005: File rpm.mbn does not have SHA1 ce110be9a902399fd37157c948afb2d8e8815ec6");
sha1_check(package_extract_file("sbl1.mbn"),          3abdc37aa422c95ace53badb02f76e429e1066fc) || abort("E3005: File sbl1.mbn does not have SHA1 3abdc37aa422c95ace53badb02f76e429e1066fc");
sha1_check(package_extract_file("splash.img"),        9964b9d993dd91c07cd1573614841d518ee8cd12) || abort("E3005: File splash.img does not have SHA1 9964b9d993dd91c07cd1573614841d518ee8cd12");
sha1_check(package_extract_file("tz.mbn"),            65ecb9ea1d20108f5d65f4131fcd68ae519789a2) || abort("E3005: File tz.mbn does not have SHA1 65ecb9ea1d20108f5d65f4131fcd68ae519789a2");

set_progress(0.1);

# Start applying the firmware images
package_extract_file("adspso.bin",        "/dev/block/bootdevice/by-name/dsp");          set_progress(0.142);
package_extract_file("cmnlib64.mbn",      "/dev/block/bootdevice/by-name/cmnlib64");     set_progress(0.185);
package_extract_file("cmnlib64.mbn",      "/dev/block/bootdevice/by-name/cmnlib64bak");  set_progress(0.228);
package_extract_file("cmnlib.mbn",        "/dev/block/bootdevice/by-name/cmnlib");       set_progress(0.271);
package_extract_file("cmnlib.mbn",        "/dev/block/bootdevice/by-name/cmnlibbak");    set_progress(0.314);
package_extract_file("devcfg.mbn",        "/dev/block/bootdevice/by-name/devcfg");       set_progress(0.357);
package_extract_file("devcfg.mbn",        "/dev/block/bootdevice/by-name/devcfgbak");    set_progress(0.400);
package_extract_file("emmc_appsboot.mbn", "/dev/block/bootdevice/by-name/aboot");        set_progress(0.442);
package_extract_file("emmc_appsboot.mbn", "/dev/block/bootdevice/by-name/abootbak");     set_progress(0.485);
package_extract_file("keymaster.mbn",     "/dev/block/bootdevice/by-name/keymaster");    set_progress(0.528);
package_extract_file("keymaster.mbn",     "/dev/block/bootdevice/by-name/keymasterbak"); set_progress(0.571);
package_extract_file("mdtp.img",          "/dev/block/bootdevice/by-name/mdtp");         set_progress(0.614);
package_extract_file("NON-HLOS.bin",      "/dev/block/bootdevice/by-name/modem");        set_progress(0.657);
package_extract_file("rpm.mbn",           "/dev/block/bootdevice/by-name/rpm");          set_progress(0.700);
package_extract_file("rpm.mbn",           "/dev/block/bootdevice/by-name/rpmbak");       set_progress(0.742);
package_extract_file("sbl1.mbn",          "/dev/block/bootdevice/by-name/sbl1");         set_progress(0.828);
package_extract_file("sbl1.mbn",          "/dev/block/bootdevice/by-name/sbl1bak");      set_progress(0.871);
package_extract_file("splash.img",        "/dev/block/bootdevice/by-name/splash");       set_progress(0.914);
package_extract_file("tz.mbn",            "/dev/block/bootdevice/by-name/tz");           set_progress(0.957);
package_extract_file("tz.mbn",            "/dev/block/bootdevice/by-name/tzbak");        set_progress(1.0);

ui_print("Firmware restoration complete!");
