###############################################################################
# Updater script for S000963_171111_ROW firmware
# Lenovo YT-X703L (Wi-Fi + LTE)
###############################################################################
getprop("ro.product.device") == "yt_x703l" || abort("E3004: This package is for \"YT-X703L\" devices; this is a \"" + getprop("ro.product.device") + "\".");

ui_print("Flashing stock firmware S000963_171111_ROW onto your YT-X703L.");
set_progress(0.01);
ui_print(" ");

# Perform the SHA1 checks
sha1_check(package_extract_file("adspso.bin"),        8b1a57f7fabd18c8f6276f59c8b4d8cabda2e445) || abort("E3005: File adspso.bin does not have SHA1 8b1a57f7fabd18c8f6276f59c8b4d8cabda2e445");
sha1_check(package_extract_file("cmnlib64.mbn"),      77f74c57b20be1a123a160ef3e0f33d752ca3fee) || abort("E3005: File cmnlib64.mbn does not have SHA1 77f74c57b20be1a123a160ef3e0f33d752ca3fee");
sha1_check(package_extract_file("cmnlib.mbn"),        edf0aeb981affc8025ff653ab9620071b4fbcf05) || abort("E3005: File cmnlib.mbn does not have SHA1 edf0aeb981affc8025ff653ab9620071b4fbcf05");
sha1_check(package_extract_file("devcfg.mbn"),        49276f059b7229976fd9152c9322772429d4eb00) || abort("E3005: File devcfg.mbn does not have SHA1 49276f059b7229976fd9152c9322772429d4eb00");
sha1_check(package_extract_file("emmc_appsboot.mbn"), 9e45e787a4b42613454a2de1460c392c6a3a0511) || abort("E3005: File emmc_appsboot.mbn does not have SHA1 9e45e787a4b42613454a2de1460c392c6a3a0511");
sha1_check(package_extract_file("keymaster.mbn"),     7378d705c82de8325d65c6e1526383bc0d4c3109) || abort("E3005: File keymaster.mbn does not have SHA1 7378d705c82de8325d65c6e1526383bc0d4c3109");
sha1_check(package_extract_file("mdtp.img"),          6be82f101913a8b888c0fc940dc4bc9f7005621b) || abort("E3005: File mdtp.img does not have SHA1 6be82f101913a8b888c0fc940dc4bc9f7005621b");
sha1_check(package_extract_file("NON-HLOS.bin"),      8c280b4e098c1f19838ffae441972d616e018dd8) || abort("E3005: File NON-HLOS.bin does not have SHA1 8c280b4e098c1f19838ffae441972d616e018dd8");
sha1_check(package_extract_file("rpm.mbn"),           8984071058db727b02052fbf3ad1a688e0bad262) || abort("E3005: File rpm.mbn does not have SHA1 8984071058db727b02052fbf3ad1a688e0bad262");
sha1_check(package_extract_file("sbl1.mbn"),          3c9977779217ddcd98eca6d1a7760ae3c8da9ff7) || abort("E3005: File sbl1.mbn does not have SHA1 3c9977779217ddcd98eca6d1a7760ae3c8da9ff7");
sha1_check(package_extract_file("splash.img"),        9964b9d993dd91c07cd1573614841d518ee8cd12) || abort("E3005: File splash.img does not have SHA1 9964b9d993dd91c07cd1573614841d518ee8cd12");
sha1_check(package_extract_file("tz.mbn"),            caf8208f5bb1ac1af181ce867e166a84f608dc89) || abort("E3005: File tz.mbn does not have SHA1 caf8208f5bb1ac1af181ce867e166a84f608dc89");

set_progress(0.1);

# Start applying the firmware images
package_extract_file("adspso.bin",        "/dev/block/bootdevice/by-name/dsp");          set_progress(0.142);
package_extract_file("cmnlib64.mbn",      "/dev/block/bootdevice/by-name/cmnlib64");     set_progress(0.185);
package_extract_file("cmnlib64.mbn",      "/dev/block/bootdevice/by-name/cmnlib64bak");  set_progress(0.228);
package_extract_file("cmnlib.mbn",        "/dev/block/bootdevice/by-name/cmnlib");       set_progress(0.271);
package_extract_file("cmnlib.mbn",        "/dev/block/bootdevice/by-name/cmnlibbak");    set_progress(0.314);
package_extract_file("devcfg.mbn",        "/dev/block/bootdevice/by-name/devcfg");       set_progress(0.357);
package_extract_file("devcfg.mbn",        "/dev/block/bootdevice/by-name/devcfgbak");    set_progress(0.400);
package_extract_file("emmc_appsboot.mbn", "/dev/block/bootdevice/by-name/aboot");        set_progress(0.442);
package_extract_file("emmc_appsboot.mbn", "/dev/block/bootdevice/by-name/abootbak");     set_progress(0.485);
package_extract_file("keymaster.mbn",     "/dev/block/bootdevice/by-name/keymaster");    set_progress(0.528);
package_extract_file("keymaster.mbn",     "/dev/block/bootdevice/by-name/keymasterbak"); set_progress(0.571);
package_extract_file("mdtp.img",          "/dev/block/bootdevice/by-name/mdtp");         set_progress(0.614);
package_extract_file("NON-HLOS.bin",      "/dev/block/bootdevice/by-name/modem");        set_progress(0.657);
package_extract_file("rpm.mbn",           "/dev/block/bootdevice/by-name/rpm");          set_progress(0.700);
package_extract_file("rpm.mbn",           "/dev/block/bootdevice/by-name/rpmbak");       set_progress(0.742);
package_extract_file("sbl1.mbn",          "/dev/block/bootdevice/by-name/sbl1");         set_progress(0.828);
package_extract_file("sbl1.mbn",          "/dev/block/bootdevice/by-name/sbl1bak");      set_progress(0.871);
package_extract_file("splash.img",        "/dev/block/bootdevice/by-name/splash");       set_progress(0.914);
package_extract_file("tz.mbn",            "/dev/block/bootdevice/by-name/tz");           set_progress(0.957);
package_extract_file("tz.mbn",            "/dev/block/bootdevice/by-name/tzbak");        set_progress(1.0);

ui_print("Firmware restoration complete!");
