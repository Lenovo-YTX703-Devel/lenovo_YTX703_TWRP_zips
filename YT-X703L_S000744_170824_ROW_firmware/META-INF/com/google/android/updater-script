###############################################################################
# Updater script for S000963_171111_ROW firmware
# Lenovo YT-X703L (Wi-Fi + LTE)
###############################################################################
getprop("ro.product.device") == "yt_x703l" || getprop("ro.product.device") == "YTX703L" || abort("E3004: This package is for \"YT-X703L\" devices; this is a \"" + getprop("ro.product.device") + "\".");

ui_print("Flashing stock firmware S000744_170824_ROW onto your YT-X703L.");
ui_print(" ");

show_progress(0.7000, 5);

ui_print("Performing the SHA1 checks...");
sha1_check(package_extract_file("adspso.bin"),        ef11cf79fb87dd34fb14c6bffcecea6aa6b9b358) || abort("E3005: File adspso.bin does not have SHA1 ef11cf79fb87dd34fb14c6bffcecea6aa6b9b358");
sha1_check(package_extract_file("cmnlib64.mbn"),      4c6b84fd6a76d6f9b0a69756e3db4fb37ae83192) || abort("E3005: File cmnlib64.mbn does not have SHA1 4c6b84fd6a76d6f9b0a69756e3db4fb37ae83192");
sha1_check(package_extract_file("cmnlib.mbn"),        bfa9a314dc467caeba071322b67b54b7cab7c17f) || abort("E3005: File cmnlib.mbn does not have SHA1 bfa9a314dc467caeba071322b67b54b7cab7c17f");
sha1_check(package_extract_file("devcfg.mbn"),        aea047ae3776d0970474fd04642519964030a32c) || abort("E3005: File devcfg.mbn does not have SHA1 aea047ae3776d0970474fd04642519964030a32c");
sha1_check(package_extract_file("emmc_appsboot.mbn"), 6bc3d83a4c15d89806d7bcf1130d08ca01e4de78) || abort("E3005: File emmc_appsboot.mbn does not have SHA1 6bc3d83a4c15d89806d7bcf1130d08ca01e4de78");
sha1_check(package_extract_file("keymaster.mbn"),     02cd3c60898eb66863d327d8c4282eff49171b28) || abort("E3005: File keymaster.mbn does not have SHA1 02cd3c60898eb66863d327d8c4282eff49171b28");
sha1_check(package_extract_file("mdtp.img"),          6be82f101913a8b888c0fc940dc4bc9f7005621b) || abort("E3005: File mdtp.img does not have SHA1 6be82f101913a8b888c0fc940dc4bc9f7005621b");
sha1_check(package_extract_file("NON-HLOS.bin"),      8f21c527c6e2daf14497e6e1369674d289397354) || abort("E3005: File NON-HLOS.bin does not have SHA1 8f21c527c6e2daf14497e6e1369674d289397354");
sha1_check(package_extract_file("rpm.mbn"),           cc6ef3530c05da9b4067c6019c146d74ffdf7e32) || abort("E3005: File rpm.mbn does not have SHA1 cc6ef3530c05da9b4067c6019c146d74ffdf7e32");
sha1_check(package_extract_file("sbl1.mbn"),          e96bb3b1339d85b7ed726c0b2bce60fe05f7b005) || abort("E3005: File sbl1.mbn does not have SHA1 e96bb3b1339d85b7ed726c0b2bce60fe05f7b005");
sha1_check(package_extract_file("splash.img"),        9964b9d993dd91c07cd1573614841d518ee8cd12) || abort("E3005: File splash.img does not have SHA1 9964b9d993dd91c07cd1573614841d518ee8cd12");
sha1_check(package_extract_file("tz.mbn"),            654c5fc58aa01da39694275218ee0b79c18097b1) || abort("E3005: File tz.mbn does not have SHA1 654c5fc58aa01da39694275218ee0b79c18097b1");

ui_print("Applying the firmware images...");
show_progress(0.3, 2);
ui_print("* dsp");          assert(package_extract_file("adspso.bin",        "/dev/block/bootdevice/by-name/dsp"));
ui_print("* cmnlib64");     assert(package_extract_file("cmnlib64.mbn",      "/dev/block/bootdevice/by-name/cmnlib64"));
ui_print("* cmnlib64bak");  assert(package_extract_file("cmnlib64.mbn",      "/dev/block/bootdevice/by-name/cmnlib64bak"));
ui_print("* cmnlib");       assert(package_extract_file("cmnlib.mbn",        "/dev/block/bootdevice/by-name/cmnlib"));
ui_print("* cmnlibbak");    assert(package_extract_file("cmnlib.mbn",        "/dev/block/bootdevice/by-name/cmnlibbak"));
ui_print("* devcfg");       assert(package_extract_file("devcfg.mbn",        "/dev/block/bootdevice/by-name/devcfg"));
ui_print("* devcfgbak");    assert(package_extract_file("devcfg.mbn",        "/dev/block/bootdevice/by-name/devcfgbak"));
ui_print("* aboot");        assert(package_extract_file("emmc_appsboot.mbn", "/dev/block/bootdevice/by-name/aboot"));
ui_print("* abootbak");     assert(package_extract_file("emmc_appsboot.mbn", "/dev/block/bootdevice/by-name/abootbak"));
ui_print("* keymaster");    assert(package_extract_file("keymaster.mbn",     "/dev/block/bootdevice/by-name/keymaster"));
ui_print("* keymasterbak"); assert(package_extract_file("keymaster.mbn",     "/dev/block/bootdevice/by-name/keymasterbak"));
ui_print("* mdtp");         assert(package_extract_file("mdtp.img",          "/dev/block/bootdevice/by-name/mdtp"));
ui_print("* modem");        assert(package_extract_file("NON-HLOS.bin",      "/dev/block/bootdevice/by-name/modem"));
ui_print("* rpm");          assert(package_extract_file("rpm.mbn",           "/dev/block/bootdevice/by-name/rpm"));
ui_print("* rpmbak");       assert(package_extract_file("rpm.mbn",           "/dev/block/bootdevice/by-name/rpmbak"));
ui_print("* sbl1");         assert(package_extract_file("sbl1.mbn",          "/dev/block/bootdevice/by-name/sbl1"));
ui_print("* sbl1bak");      assert(package_extract_file("sbl1.mbn",          "/dev/block/bootdevice/by-name/sbl1bak"));
ui_print("* splash");       assert(package_extract_file("splash.img",        "/dev/block/bootdevice/by-name/splash"));
ui_print("* tz");           assert(package_extract_file("tz.mbn",            "/dev/block/bootdevice/by-name/tz"));
ui_print("* tzbak");        assert(package_extract_file("tz.mbn",            "/dev/block/bootdevice/by-name/tzbak"));

ui_print("Firmware restoration complete!");
ui_print(" ");
set_progress(1.000000);

