###############################################################################
# Updater script for S000963_171111_ROW firmware
# Lenovo YT-X703F (Wi-Fi only)
###############################################################################
getprop("ro.product.device") == "yt_x703f" || abort("E3004: This package is for \"YT-X703F\" devices; this is a \"" + getprop("ro.product.device") + "\".");

ui_print("Flashing stock firmware S000963_171111_ROW onto your YT-X703F.");
ui_print(" ");

show_progress(0.7000, 5);

ui_print("Performing the SHA1 checks...");
sha1_check(package_extract_file("adspso.bin"),        7499a82db2f4d0c144bce15e7f610ea4e90fce6a) || abort("E3005: File adspso.bin does not have SHA1 7499a82db2f4d0c144bce15e7f610ea4e90fce6a");
sha1_check(package_extract_file("cmnlib64.mbn"),      e4020489a7e3c37e53a2622f973173128344efe9) || abort("E3005: File cmnlib64.mbn does not have SHA1 e4020489a7e3c37e53a2622f973173128344efe9");
sha1_check(package_extract_file("cmnlib.mbn"),        e77e9018e9a2df8d2094ba19bcb732b907f4610d) || abort("E3005: File cmnlib.mbn does not have SHA1 e77e9018e9a2df8d2094ba19bcb732b907f4610d");
sha1_check(package_extract_file("devcfg.mbn"),        ae29538a756388eba9ef4d5ee69ebcae84af91f9) || abort("E3005: File devcfg.mbn does not have SHA1 ae29538a756388eba9ef4d5ee69ebcae84af91f9");
sha1_check(package_extract_file("emmc_appsboot.mbn"), e1daf62e9b1083a17ff689677a2ea30f84af37a9) || abort("E3005: File emmc_appsboot.mbn does not have SHA1 e1daf62e9b1083a17ff689677a2ea30f84af37a9");
sha1_check(package_extract_file("keymaster.mbn"),     ddd9c352da5d85775ead6f895e6426ce59718580) || abort("E3005: File keymaster.mbn does not have SHA1 ddd9c352da5d85775ead6f895e6426ce59718580");
sha1_check(package_extract_file("mdtp.img"),          6be82f101913a8b888c0fc940dc4bc9f7005621b) || abort("E3005: File mdtp.img does not have SHA1 6be82f101913a8b888c0fc940dc4bc9f7005621b");
sha1_check(package_extract_file("NON-HLOS.bin"),      156469c4001aef7c97b9c960bbb0b5d06cafdcea) || abort("E3005: File NON-HLOS.bin does not have SHA1 156469c4001aef7c97b9c960bbb0b5d06cafdcea");
sha1_check(package_extract_file("rpm.mbn"),           2d9b6230bce7508dd59aeae6a29b3e4a2a38cd1b) || abort("E3005: File rpm.mbn does not have SHA1 2d9b6230bce7508dd59aeae6a29b3e4a2a38cd1b");
sha1_check(package_extract_file("sbl1.mbn"),          ef6239cff8d247f4c5b23908a27c6dc8c7accccb) || abort("E3005: File sbl1.mbn does not have SHA1 ef6239cff8d247f4c5b23908a27c6dc8c7accccb");
sha1_check(package_extract_file("splash.img"),        9964b9d993dd91c07cd1573614841d518ee8cd12) || abort("E3005: File splash.img does not have SHA1 9964b9d993dd91c07cd1573614841d518ee8cd12");
sha1_check(package_extract_file("tz.mbn"),            23528d788bca0d4b4be807d21695caa77d6c612c) || abort("E3005: File tz.mbn does not have SHA1 23528d788bca0d4b4be807d21695caa77d6c612c");

set_progress(0.1);

ui_print("Applying the firmware images...");
show_progress(0.3, 2);
ui_print("* dsp");          assert(package_extract_file("adspso.bin",        "/dev/block/bootdevice/by-name/dsp"));
ui_print("* cmnlib64");     assert(package_extract_file("cmnlib64.mbn",      "/dev/block/bootdevice/by-name/cmnlib64"));
ui_print("* cmnlib64bak");  assert(package_extract_file("cmnlib64.mbn",      "/dev/block/bootdevice/by-name/cmnlib64bak"));
ui_print("* cmnlib");       assert(package_extract_file("cmnlib.mbn",        "/dev/block/bootdevice/by-name/cmnlib"));
ui_print("* cmnlibbak");    assert(package_extract_file("cmnlib.mbn",        "/dev/block/bootdevice/by-name/cmnlibbak"));
ui_print("* devcfg");       assert(package_extract_file("devcfg.mbn",        "/dev/block/bootdevice/by-name/devcfg"));
ui_print("* devcfgbak");    assert(package_extract_file("devcfg.mbn",        "/dev/block/bootdevice/by-name/devcfgbak"));
ui_print("* aboot");        assert(package_extract_file("emmc_appsboot.mbn", "/dev/block/bootdevice/by-name/aboot"));
ui_print("* abootbak");     assert(package_extract_file("emmc_appsboot.mbn", "/dev/block/bootdevice/by-name/abootbak"));
ui_print("* keymaster");    assert(package_extract_file("keymaster.mbn",     "/dev/block/bootdevice/by-name/keymaster"));
ui_print("* keymasterbak"); assert(package_extract_file("keymaster.mbn",     "/dev/block/bootdevice/by-name/keymasterbak"));
ui_print("* mdtp");         assert(package_extract_file("mdtp.img",          "/dev/block/bootdevice/by-name/mdtp"));
ui_print("* modem");        assert(package_extract_file("NON-HLOS.bin",      "/dev/block/bootdevice/by-name/modem"));
ui_print("* rpm");          assert(package_extract_file("rpm.mbn",           "/dev/block/bootdevice/by-name/rpm"));
ui_print("* rpmbak");       assert(package_extract_file("rpm.mbn",           "/dev/block/bootdevice/by-name/rpmbak"));
ui_print("* sbl1");         assert(package_extract_file("sbl1.mbn",          "/dev/block/bootdevice/by-name/sbl1"));
ui_print("* sbl1bak");      assert(package_extract_file("sbl1.mbn",          "/dev/block/bootdevice/by-name/sbl1bak"));
ui_print("* splash");       assert(package_extract_file("splash.img",        "/dev/block/bootdevice/by-name/splash"));
ui_print("* tz");           assert(package_extract_file("tz.mbn",            "/dev/block/bootdevice/by-name/tz"));
ui_print("* tzbak");        assert(package_extract_file("tz.mbn",            "/dev/block/bootdevice/by-name/tzbak"));

ui_print("Firmware restoration complete!");
ui_print(" ");
set_progress(1.000000);

